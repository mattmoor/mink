# Copyright 2020 The Knative Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: controlplane
  namespace: mink-system
  labels:
    knative.dev/release: devel
spec:
  replicas: 1
  podManagementPolicy: Parallel
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app: controlplane
  serviceName: &service "autoscaler"
  template:
    metadata:
      annotations:
        cluster-autoscaler.kubernetes.io/safe-to-evict: "false"
      labels:
        app: controlplane
        knative.dev/release: devel
    spec:
      # To avoid node becoming SPOF, spread our replicas to different nodes.
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchLabels:
                  app: controlplane
              topologyKey: kubernetes.io/hostname
            weight: 100

      serviceAccountName: controller
      containers:
      - name: controller
        # This is the Go import path for the binary that is containerized
        # and substituted here.
        image: ko://github.com/mattmoor/mink/cmd/webhook

        # Mostly from Tekton
        args: [
          "-kubeconfig-writer-image", "ko://github.com/tektoncd/pipeline/cmd/kubeconfigwriter",
          "-git-image", "ko://github.com/tektoncd/pipeline/cmd/git-init",
          "-entrypoint-image", "ko://github.com/tektoncd/pipeline/cmd/entrypoint",
          "-nop-image", "ko://github.com/tektoncd/pipeline/cmd/nop",
          "-imagedigest-exporter-image", "ko://github.com/tektoncd/pipeline/cmd/imagedigestexporter",
          "-pr-image", "ko://github.com/tektoncd/pipeline/cmd/pullrequest-init",
          "-build-gcs-fetcher-image", "ko://github.com/GoogleCloudPlatform/cloud-builders/gcs-fetcher/cmd/gcs-fetcher",
          "-shell-image", "ghcr.io/mattmoor/distroless/base:debug",

          # Not multi-arch.
          "-gsutil-image", "google/cloud-sdk",

          # Production Let's Encrypt endpoint.
          "-acme-endpoint", "https://acme-v02.api.letsencrypt.org/directory",

          # Staging Let's Encrypt endpoint.
          # "-acme-endpoint", "https://acme-staging-v02.api.letsencrypt.org/directory",
        ]

        resources:
          requests:
            cpu: 100m
            memory: 100Mi
          limits:
            cpu: 1000m
            memory: 1000Mi

        readinessProbe:
          periodSeconds: 1
          httpGet:
            scheme: HTTPS
            port: 8443
            httpHeaders:
            - name: k-kubelet-probe
              value: "controlplane"
        livenessProbe:
          periodSeconds: 1
          failureThreshold: 50
          httpGet:
            scheme: HTTPS
            port: 8443
            httpHeaders:
            - name: k-kubelet-probe
              value: "controlplane"

        env:
        # These settings are used for statefulset-based
        # leader selection.
        - name: STATEFUL_CONTROLLER_ORDINAL
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: STATEFUL_SERVICE_NAME
          value: *service

        - name: SYSTEM_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: CONFIG_LOGGING_NAME
          value: config-logging
        - name: CONFIG_OBSERVABILITY_NAME
          value: config-observability
        - name: CONFIG_FEATURE_FLAGS_NAME
          value: config-features

        # Kourier configuration
        - name: CERTS_SECRET_NAMESPACE
          value: ""
        - name: CERTS_SECRET_NAME
          value: ""
        - name: KOURIER_GATEWAY_NAMESPACE
          value: "mink-system"

        # Enable Broker injection by default
        - name: BROKER_INJECTION_DEFAULT
          value: "true"

        # PingSource
        - name: MT_PING_IMAGE
          value: ko://knative.dev/eventing/cmd/mtping

        # APIServerSource
        - name: APISERVER_RA_IMAGE
          value: ko://knative.dev/eventing/cmd/apiserver_receive_adapter

        # TODO(https://github.com/knative/pkg/pull/953): Remove stackdriver specific config
        - name: METRICS_DOMAIN
          value: knative.dev/mink
        - name: METRICS_PROMETHEUS_PORT
          value: "9030"
        - name: PROFILING_PORT
          value: "8010"

        # Mostly from Tekton
        - name: CONFIG_ARTIFACT_BUCKET_NAME
          value: config-artifact-bucket
        - name: CONFIG_ARTIFACT_PVC_NAME
          value: config-artifact-pvc

        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          capabilities:
            drop:
            - all

        ports:
        - name: http-challenge
          containerPort: 8765
        - name: profiling
          containerPort: 8010
        - name: https-webhook
          containerPort: 8443
        - name: http2-xds
          containerPort: 18000

      - name: autoscaler
        # This is the Go import path for the binary that is containerized
        # and substituted here.
        image: ko://knative.dev/serving/cmd/autoscaler

        resources:
          requests:
            cpu: 30m
            memory: 40Mi
          limits:
            cpu: 300m
            memory: 400Mi

        env:
        - name: STATEFUL_CONTROLLER_ORDINAL
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: STATEFUL_SERVICE_NAME
          value: *service
        - name: STATEFUL_SERVICE_PROTOCOL
          value: "ws"
        - name: STATEFUL_SERVICE_PORT
          value: "8080"
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: SYSTEM_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: CONFIG_LOGGING_NAME
          value: config-logging
        - name: CONFIG_OBSERVABILITY_NAME
          value: config-observability
        # TODO(https://github.com/knative/pkg/pull/953): Remove stackdriver specific config
        - name: METRICS_DOMAIN
          value: knative.dev/serving
        - name: METRICS_PROMETHEUS_PORT
          value: "9031"
        - name: PROFILING_PORT
          value: "8011"

        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          capabilities:
            drop:
            - all

        ports:
        - name: profiling
          containerPort: 8011
        - name: websocket
          containerPort: 8080

        readinessProbe:
          httpGet:
            port: 8080
            httpHeaders:
            - name: k-kubelet-probe
              value: "autoscaler"
        livenessProbe:
          httpGet:
            port: 8080
            httpHeaders:
            - name: k-kubelet-probe
              value: "autoscaler"
          failureThreshold: 6

      dnsPolicy: ClusterFirst

---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: controlplane
    knative.dev/release: devel
  name: webhook
  namespace: mink-system
spec:
  ports:
  # Define metrics and profiling for them to be accessible within service meshes.
  - name: http-metrics
    port: 9090
    targetPort: 9090
  - name: http-profiling
    port: 8008
    targetPort: 8008
  - name: https-webhook
    port: 443
    targetPort: 8443
  - name: http
    port: 8080
    targetPort: 8080
  selector:
    app: controlplane

---
apiVersion: v1
kind: Service
metadata:
  name: kourier-control
  namespace: mink-system
spec:
  ports:
    - name: grpc-xds
      port: 18000
      targetPort: 18000
  selector:
    app: controlplane
  type: ClusterIP

---
apiVersion: v1
kind: Service
metadata:
  name: autoscaler
  namespace: mink-system
spec:
  clusterIP: None
  ports:
  - name: http
    port: 8080
    targetPort: 8080
  selector:
    app: controlplane
