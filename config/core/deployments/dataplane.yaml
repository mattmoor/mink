# Copyright 2018 The Knative Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: dataplane
  namespace: mink-system
  labels:
    knative.dev/release: devel
spec:
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 34%
  selector:
    matchLabels:
      role: dataplane
  template:
    metadata:
      labels:
        # This must match net-kourier code.
        app: 3scale-kourier-gateway
        role: dataplane
        knative.dev/release: devel
    spec:
      serviceAccountName: controller
      containers:
      - name: activator
        # This is the Go import path for the binary that is containerized
        # and substituted here.
        image: ko://knative.dev/serving/cmd/activator

        resources:
          requests:
            cpu: 100m
            memory: 60Mi
          limits:
            cpu: 1000m
            memory: 600Mi

        env:
        # Run Activator with GC collection when newly generated memory is 500%.
        - name: GOGC
          value: "500"
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: SYSTEM_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: CONFIG_LOGGING_NAME
          value: config-logging
        - name: CONFIG_OBSERVABILITY_NAME
          value: config-observability
        # TODO(https://github.com/knative/pkg/pull/953): Remove stackdriver specific config
        - name: METRICS_DOMAIN
          value: knative.dev/internal/serving

        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          capabilities:
            drop:
            - all

        ports:
        - name: metrics
          containerPort: 9090
        - name: profiling
          containerPort: 8008
        - name: http1
          containerPort: 8012
        - name: h2c
          containerPort: 8013

        readinessProbe: &probe
          httpGet:
            port: 8012
            httpHeaders:
            - name: k-kubelet-probe
              value: "activator"
        livenessProbe: *probe

      - name: broker-filter
        terminationMessagePolicy: FallbackToLogsOnError
        image: ko://knative.dev/eventing/cmd/mtbroker/filter
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /healthz
            port: 9999
            scheme: HTTP
          initialDelaySeconds: 20
          periodSeconds: 2
          successThreshold: 1
          timeoutSeconds: 1
        ports:
        - containerPort: 9999
          name: http
          protocol: TCP
        - containerPort: 9090
          name: metrics
          protocol: TCP
        terminationMessagePath: /dev/termination-log
        env:
          - name: FILTER_PORT
            value: "9999"
          - name: SYSTEM_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: CONTAINER_NAME
            value: broker-filter
          - name: CONFIG_LOGGING_NAME
            value: config-logging
          - name: CONFIG_OBSERVABILITY_NAME
            value: config-observability
          - name: METRICS_DOMAIN
            value: knative.dev/internal/eventing

        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          capabilities:
            drop:
            - all

      - name: broker-ingress
        terminationMessagePolicy: FallbackToLogsOnError
        image: ko://knative.dev/eventing/cmd/mtbroker/ingress
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /healthz
            port: 8888
            scheme: HTTP
          initialDelaySeconds: 20
          periodSeconds: 2
          successThreshold: 1
          timeoutSeconds: 1
        ports:
        - containerPort: 8888
          name: http
          protocol: TCP
        - containerPort: 9090
          name: metrics
          protocol: TCP
        terminationMessagePath: /dev/termination-log
        env:
          - name: INGRESS_PORT
            value: "8888"
          - name: SYSTEM_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: CONTAINER_NAME
            value: broker-ingress
          - name: CONFIG_LOGGING_NAME
            value: config-logging
          - name: CONFIG_OBSERVABILITY_NAME
            value: config-observability
          - name: METRICS_DOMAIN
            value: knative.dev/internal/eventing

        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          capabilities:
            drop:
            - all


      - name: kourier-gateway
        args:
          - --base-id 1
          - -c /tmp/config/envoy-bootstrap.yaml
          - --log-level info
        command:
          - /usr/local/bin/envoy
        image: ghcr.io/mattmoor/envoy:v1.16-latest
        ports:
          - name: http2-external
            containerPort: 8080
          - name: http2-internal
            containerPort: 8081
          - name: https-external
            containerPort: 8443

        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          runAsNonRoot: false
          capabilities:
            drop:
              - all

        volumeMounts:
          - name: config-volume
            mountPath: /tmp/config
        lifecycle:
          preStop:
            exec:
              command: ["/bin/sh","-c","curl -X POST --unix /tmp/envoy.admin http://localhost/healthcheck/fail; sleep 15"]
        readinessProbe:
          httpGet:
            httpHeaders:
              - name: Host
                value: internalkourier
            path: /ready
            port: 8081
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 5

      restartPolicy: Always
      volumes:
        - name: config-volume
          configMap:
            name: kourier-bootstrap

      # The activator (often) sits on the dataplane, and may proxy long (e.g.
      # streaming, websockets) requests.  We give a long grace period for the
      # activator to "lame duck" and drain outstanding requests before we
      # forcibly terminate the pod (and outstanding connections).  This value
      # should be at least as large as the upper bound on the Revision's
      # timeoutSeconds property to avoid servicing events disrupting
      # connections.
      terminationGracePeriodSeconds: 300

---
apiVersion: v1
kind: Service
metadata:
  name: activator-service
  namespace: mink-system
  labels:
    app: dataplane
    knative.dev/release: devel
spec:
  selector:
    role: dataplane
  ports:
  # Define metrics and profiling for them to be accessible within service meshes.
  - name: http-metrics
    port: 9090
    targetPort: 9090
  - name: http-profiling
    port: 8008
    targetPort: 8008
  - name: http
    port: 80
    targetPort: 8012
  - name: http2
    port: 81
    targetPort: 8013
  type: ClusterIP

---
apiVersion: v1
kind: Service
metadata:
  name: broker-ingress
  namespace: mink-system
spec:
  ports:
    - name: http
      port: 80
      targetPort: 8888
  selector:
    role: dataplane

---
apiVersion: v1
kind: Service
metadata:
  name: broker-filter
  namespace: mink-system
spec:
  ports:
    - name: http
      port: 80
      targetPort: 9999
  selector:
    role: dataplane


---
apiVersion: v1
kind: Service
metadata:
  name: kourier
  namespace: mink-system
spec:
  ports:
    - name: http2
      port: 80
      targetPort: 8080
    - name: https
      port: 443
      targetPort: 8443
  selector:
    role: dataplane
  type: LoadBalancer
---
apiVersion: v1
kind: Service
metadata:
  name: kourier-internal
  namespace: mink-system
spec:
  ports:
    - name: http2
      port: 80
      targetPort: 8081
  selector:
    role: dataplane
  type: ClusterIP
