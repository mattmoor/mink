/*
Copyright 2019 The Knative Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/mattmoor/bindings/pkg/apis/bindings/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// GithubBindingLister helps list GithubBindings.
type GithubBindingLister interface {
	// List lists all GithubBindings in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.GithubBinding, err error)
	// GithubBindings returns an object that can list and get GithubBindings.
	GithubBindings(namespace string) GithubBindingNamespaceLister
	GithubBindingListerExpansion
}

// githubBindingLister implements the GithubBindingLister interface.
type githubBindingLister struct {
	indexer cache.Indexer
}

// NewGithubBindingLister returns a new GithubBindingLister.
func NewGithubBindingLister(indexer cache.Indexer) GithubBindingLister {
	return &githubBindingLister{indexer: indexer}
}

// List lists all GithubBindings in the indexer.
func (s *githubBindingLister) List(selector labels.Selector) (ret []*v1alpha1.GithubBinding, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.GithubBinding))
	})
	return ret, err
}

// GithubBindings returns an object that can list and get GithubBindings.
func (s *githubBindingLister) GithubBindings(namespace string) GithubBindingNamespaceLister {
	return githubBindingNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// GithubBindingNamespaceLister helps list and get GithubBindings.
type GithubBindingNamespaceLister interface {
	// List lists all GithubBindings in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.GithubBinding, err error)
	// Get retrieves the GithubBinding from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.GithubBinding, error)
	GithubBindingNamespaceListerExpansion
}

// githubBindingNamespaceLister implements the GithubBindingNamespaceLister
// interface.
type githubBindingNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all GithubBindings in the indexer for a given namespace.
func (s githubBindingNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.GithubBinding, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.GithubBinding))
	})
	return ret, err
}

// Get retrieves the GithubBinding from the indexer for a given namespace and name.
func (s githubBindingNamespaceLister) Get(name string) (*v1alpha1.GithubBinding, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("githubbinding"), name)
	}
	return obj.(*v1alpha1.GithubBinding), nil
}
