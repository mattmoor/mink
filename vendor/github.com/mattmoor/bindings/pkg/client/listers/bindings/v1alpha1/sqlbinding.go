/*
Copyright 2019 The Knative Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/mattmoor/bindings/pkg/apis/bindings/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SQLBindingLister helps list SQLBindings.
type SQLBindingLister interface {
	// List lists all SQLBindings in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.SQLBinding, err error)
	// SQLBindings returns an object that can list and get SQLBindings.
	SQLBindings(namespace string) SQLBindingNamespaceLister
	SQLBindingListerExpansion
}

// sQLBindingLister implements the SQLBindingLister interface.
type sQLBindingLister struct {
	indexer cache.Indexer
}

// NewSQLBindingLister returns a new SQLBindingLister.
func NewSQLBindingLister(indexer cache.Indexer) SQLBindingLister {
	return &sQLBindingLister{indexer: indexer}
}

// List lists all SQLBindings in the indexer.
func (s *sQLBindingLister) List(selector labels.Selector) (ret []*v1alpha1.SQLBinding, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SQLBinding))
	})
	return ret, err
}

// SQLBindings returns an object that can list and get SQLBindings.
func (s *sQLBindingLister) SQLBindings(namespace string) SQLBindingNamespaceLister {
	return sQLBindingNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SQLBindingNamespaceLister helps list and get SQLBindings.
type SQLBindingNamespaceLister interface {
	// List lists all SQLBindings in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.SQLBinding, err error)
	// Get retrieves the SQLBinding from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.SQLBinding, error)
	SQLBindingNamespaceListerExpansion
}

// sQLBindingNamespaceLister implements the SQLBindingNamespaceLister
// interface.
type sQLBindingNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SQLBindings in the indexer for a given namespace.
func (s sQLBindingNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.SQLBinding, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SQLBinding))
	})
	return ret, err
}

// Get retrieves the SQLBinding from the indexer for a given namespace and name.
func (s sQLBindingNamespaceLister) Get(name string) (*v1alpha1.SQLBinding, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("sqlbinding"), name)
	}
	return obj.(*v1alpha1.SQLBinding), nil
}
