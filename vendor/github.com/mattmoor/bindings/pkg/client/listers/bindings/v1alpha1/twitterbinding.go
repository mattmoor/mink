/*
Copyright 2019 The Knative Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/mattmoor/bindings/pkg/apis/bindings/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// TwitterBindingLister helps list TwitterBindings.
type TwitterBindingLister interface {
	// List lists all TwitterBindings in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.TwitterBinding, err error)
	// TwitterBindings returns an object that can list and get TwitterBindings.
	TwitterBindings(namespace string) TwitterBindingNamespaceLister
	TwitterBindingListerExpansion
}

// twitterBindingLister implements the TwitterBindingLister interface.
type twitterBindingLister struct {
	indexer cache.Indexer
}

// NewTwitterBindingLister returns a new TwitterBindingLister.
func NewTwitterBindingLister(indexer cache.Indexer) TwitterBindingLister {
	return &twitterBindingLister{indexer: indexer}
}

// List lists all TwitterBindings in the indexer.
func (s *twitterBindingLister) List(selector labels.Selector) (ret []*v1alpha1.TwitterBinding, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TwitterBinding))
	})
	return ret, err
}

// TwitterBindings returns an object that can list and get TwitterBindings.
func (s *twitterBindingLister) TwitterBindings(namespace string) TwitterBindingNamespaceLister {
	return twitterBindingNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// TwitterBindingNamespaceLister helps list and get TwitterBindings.
type TwitterBindingNamespaceLister interface {
	// List lists all TwitterBindings in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.TwitterBinding, err error)
	// Get retrieves the TwitterBinding from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.TwitterBinding, error)
	TwitterBindingNamespaceListerExpansion
}

// twitterBindingNamespaceLister implements the TwitterBindingNamespaceLister
// interface.
type twitterBindingNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all TwitterBindings in the indexer for a given namespace.
func (s twitterBindingNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.TwitterBinding, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TwitterBinding))
	})
	return ret, err
}

// Get retrieves the TwitterBinding from the indexer for a given namespace and name.
func (s twitterBindingNamespaceLister) Get(name string) (*v1alpha1.TwitterBinding, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("twitterbinding"), name)
	}
	return obj.(*v1alpha1.TwitterBinding), nil
}
