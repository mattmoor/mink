on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
    - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

name: Create Release

jobs:

  cli:
    name: Release the CLI
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.17.x
      - name: GoReleaser
        uses: goreleaser/goreleaser-action@v3
        with:
          version: latest
          args: release --rm-dist
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  ko-resolve:
    needs: cli
    name: Release ko artifact
    runs-on: ubuntu-latest

    # https://docs.github.com/en/actions/reference/authentication-in-a-workflow
    permissions:
      id-token: write  # undocumented OIDC support.
      packages: write
      contents: read

    env:
      GOPATH: ${{ github.workspace }}
      GO111MODULE: on
      GOFLAGS: -ldflags=-s -ldflags=-w -tags=nostackdriver
      KO_DOCKER_REPO: ghcr.io/mattmoor
      KOFLAGS: --platform=linux/amd64,linux/arm64 -P
      COSIGN_EXPERIMENTAL: "true"

    steps:
    - name: Set up Go 1.17.x
      uses: actions/setup-go@v1
      with:
        go-version: 1.17.x

    - name: Add GOPATH/bin to PATH
      shell: bash
      run: |
        echo "GOPATH=$(go env GOPATH)" >> $GITHUB_ENV
        echo "$(go env GOPATH)/bin" >> $GITHUB_PATH

    - name: Setup ko
      run: |
        echo '::group:: install ko'
        curl -L https://github.com/google/ko/releases/download/v0.8.3/ko_0.8.3_Linux_x86_64.tar.gz | tar xzf - ko
        chmod +x ./ko
        sudo mv ko /usr/local/bin
        echo '::endgroup::'

        echo '::group:: install yq'
        go get github.com/mikefarah/yq/v4
        echo '::endgroup::'

    - name: Install cosign
      uses: sigstore/cosign-installer@main

    - name: Log into ghcr.io
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

    - name: Check out code onto GOPATH
      uses: actions/checkout@v3
      with:
        fetch-depth: 1
        path: ./src/github.com/${{ github.repository }}

    - name: Get Release URL
      id: get_release_url
      uses: bruceadams/get-release@v1.2.0
      env:
        GITHUB_TOKEN: ${{ github.token }}

    - name: Build and Publish images, Produce release artifact.
      working-directory: ./src/github.com/${{ github.repository }}
      run: |
        EXPANDER=$(ko publish ${KOFLAGS} --tags $(basename "${{ github.ref }}" ),latest -B ./cmd/kontext-expander)
        PLATFORM_SETUP=$(ko publish ${KOFLAGS} --tags $(basename "${{ github.ref }}" ),latest -B ./cmd/platform-setup)
        EXTRACT_DIGEST=$(ko publish ${KOFLAGS} --tags $(basename "${{ github.ref }}" ),latest -B ./cmd/extract-digest)
        KO=$(ko publish ${KOFLAGS} --tags $(basename "${{ github.ref }}" ),latest -B github.com/google/ko/cmd/ko)

        ko resolve ${KOFLAGS} --tags $(basename "${{ github.ref }}" ) -BRf config/core > core.yaml
        ko resolve ${KOFLAGS} --tags $(basename "${{ github.ref }}" ) -BRf config/in-memory > in-memory.yaml

        # concatenate them with ko
        ko resolve -f core.yaml -f in-memory.yaml > release.yaml

        # For extract_digests (shared with ./hack/build.sh)
        source ./hack/build-flags.sh

        cosign sign ${EXPANDER} ${KO} ${PLATFORM_SETUP} ${EXTRACT_DIGEST} \
           $(extract_digests release.yaml)

    - name: Upload Core Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
      with:
        upload_url: ${{ steps.get_release_url.outputs.upload_url }}
        asset_path: ./src/github.com/${{ github.repository }}/core.yaml
        asset_name: core.yaml
        asset_content_type: text/plain

    - name: Upload IMC Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
      with:
        upload_url: ${{ steps.get_release_url.outputs.upload_url }}
        asset_path: ./src/github.com/${{ github.repository }}/in-memory.yaml
        asset_name: in-memory.yaml
        asset_content_type: text/plain

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
      with:
        upload_url: ${{ steps.get_release_url.outputs.upload_url }}
        asset_path: ./src/github.com/${{ github.repository }}/release.yaml
        asset_name: release.yaml
        asset_content_type: text/plain
