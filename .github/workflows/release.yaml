on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
    - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

name: Create Release

jobs:

  cli:
    name: Release the CLI
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.14
      - name: GoReleaser
        uses: goreleaser/goreleaser-action@v2
        with:
          version: latest
          args: release --rm-dist
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  ko-resolve:
    needs: cli
    name: Release ko artifact
    runs-on: ubuntu-latest
    env:
      GOPATH: ${{ github.workspace }}
      GO111MODULE: on
      GOFLAGS: -ldflags=-s -ldflags=-w
      KO_DOCKER_REPO: ghcr.io/mattmoor
      KOFLAGS: --platform=all -P
      GGCR_EXPERIMENT_ESTARGZ: "1"

    steps:
    - name: Set up Go 1.15.x
      uses: actions/setup-go@v1
      with:
        go-version: 1.15.x

    - name: Add GOPATH/bin to PATH
      shell: bash
      run: |
        echo "::set-env name=GOPATH::$(go env GOPATH)"
        echo "::add-path::$(go env GOPATH)/bin"

    - name: Setup ko
      run: |
        go get github.com/google/ko/cmd/ko
        docker login -u mattmoor -p ${{ secrets.DOCKERHUB_PASSWORD }}

    - name: Check out code onto GOPATH
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        path: ./src/github.com/${{ github.repository }}

    - name: Get Release URL
      id: get_release_url
      uses: bruceadams/get-release@v1.2.0
      env:
        GITHUB_TOKEN: ${{ github.token }}

    - name: Build and Publish images, Produce release artifact.
      working-directory: ./src/github.com/${{ github.repository }}
      run: |
        ko publish ${KOFLAGS} --tags $(basename "${{ github.ref }}" ),latest -B ./cmd/kontext-expander
        ko publish ${KOFLAGS} --tags $(basename "${{ github.ref }}" ),latest -B ./cmd/platform-setup
        ko publish ${KOFLAGS} --tags $(basename "${{ github.ref }}" ),latest -B ./cmd/extract-digest
        ko publish ${KOFLAGS} --tags $(basename "${{ github.ref }}" ),latest -B github.com/google/ko/cmd/ko
        ko resolve ${KOFLAGS} --tags $(basename "${{ github.ref }}" ) -BRf config/core > core.yaml
        ko resolve ${KOFLAGS} --tags $(basename "${{ github.ref }}" ) -BRf config/in-memory > in-memory.yaml

        # concatenate them with ko
        ko resolve -f core.yaml -f in-memory.yaml > release.yaml

    - name: Upload Core Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_release_url.outputs.upload_url }}
        asset_path: ./src/github.com/${{ github.repository }}/core.yaml
        asset_name: core.yaml
        asset_content_type: text/plain

    - name: Upload IMC Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_release_url.outputs.upload_url }}
        asset_path: ./src/github.com/${{ github.repository }}/in-memory.yaml
        asset_name: in-memory.yaml
        asset_content_type: text/plain

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_release_url.outputs.upload_url }}
        asset_path: ./src/github.com/${{ github.repository }}/release.yaml
        asset_name: release.yaml
        asset_content_type: text/plain
