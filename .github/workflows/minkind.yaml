name: MinKinD Upstream E2Es

on:
  pull_request:
    branches: [ master ]

  schedule:
  - cron: '0 */3 * * *'

defaults:
  run:
    shell: bash
    working-directory: ./src/github.com/mattmoor/mink

jobs:
  upstream-tests:
    name: e2e tests
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false # Keep running if one leg fails.
      matrix:
        k8s-version:
        - v1.17.x
        - v1.18.x
        - v1.19.x
        - v1.20.x-estargz

        leg:
        - ingress conformance
        - serving runtime conformance
        - serving api conformance
        - serving e2e
        - eventing e2e
        - eventing conformance
        - tekton e2e

        # Map from the test leg to specific settings.
        include:
        - leg: ingress conformance
          upstream: knative.dev/net-contour
          org: knative-sandbox
          repo: net-contour
          test-suite: ./test/conformance/...
          extra-go-flags: -short
          extra-test-flags: --ingressClass=contour.ingress.networking.knative.dev --cluster-suffix=c${{ github.run_id }}.local --enable-alpha --enable-beta
          skip-test-config: 'true'
        - leg: serving runtime conformance
          upstream: knative.dev/serving
          org: knative
          repo: serving
          test-suite: ./test/conformance/runtime/...
          extra-test-flags: --ingressClass=contour.ingress.networking.knative.dev
          skip-test-config: 'false'
        - leg: serving api conformance
          upstream: knative.dev/serving
          org: knative
          repo: serving
          test-suite: ./test/conformance/api/...
          extra-test-flags: --ingressClass=contour.ingress.networking.knative.dev --enable-alpha
          skip-test-config: 'false'
        - leg: serving e2e
          upstream: knative.dev/serving
          org: knative
          repo: serving
          test-suite: ./test/e2e
          extra-test-flags: --ingressClass=contour.ingress.networking.knative.dev
          skip-test-config: 'false'
        - leg: eventing e2e
          upstream: knative.dev/eventing
          org: knative
          repo: eventing
          test-suite: ./test/e2e
          extra-go-flags: -parallel=12
          extra-test-flags: -brokerclass=MTChannelBasedBroker -channels=messaging.knative.dev/v1beta1:Channel,messaging.knative.dev/v1beta1:InMemoryChannel,messaging.knative.dev/v1:Channel,messaging.knative.dev/v1:InMemoryChannel -sources=sources.knative.dev/v1alpha2:ApiServerSource,sources.knative.dev/v1alpha2:ContainerSource,sources.knative.dev/v1alpha2:PingSource
          skip-test-config: 'false'
        - leg: eventing conformance
          upstream: knative.dev/eventing
          org: knative
          repo: eventing
          test-suite: ./test/conformance
          extra-go-flags: -parallel=12
          extra-test-flags: -brokers=eventing.knative.dev/v1beta1:MTChannelBasedBroker -channels=messaging.knative.dev/v1beta1:Channel,messaging.knative.dev/v1beta1:InMemoryChannel,messaging.knative.dev/v1:Channel,messaging.knative.dev/v1:InMemoryChannel -sources=sources.knative.dev/v1beta1:ApiServerSource,sources.knative.dev/v1alpha2:ContainerSource,sources.knative.dev/v1beta1:PingSource
          skip-test-config: 'false'
        - leg: tekton e2e
          upstream: github.com/tektoncd/pipeline
          org: tektoncd
          repo: pipeline
          test-suite: ./test/...
          skip-test-config: 'true'

        # TODO(https://github.com/knative/serving/issues/10477): Remove exclusion once fixed.
        exclude:
        - leg: serving api conformance
          k8s-version: v1.20.x-estargz

    env:
      GOPATH: ${{ github.workspace }}
      GO111MODULE: on
      GOFLAGS: -ldflags=-s -ldflags=-w -mod=vendor -tags=nostackdriver
      GGCR_EXPERIMENT_ESTARGZ: "1"
      KO_DOCKER_REPO: registry.local:5000/knative
      GATEWAY_OVERRIDE: envoy-external
      GATEWAY_NAMESPACE_OVERRIDE: mink-system
      SYSTEM_NAMESPACE: mink-system
      # Tekton tests rely on this.
      CONFIG_FEATURE_FLAGS_NAME: config-features
      ARTIFACTS: ${{ github.workspace }}/artifacts

    steps:
    - name: Set up Go 1.15.x
      uses: actions/setup-go@v2
      with:
        go-version: 1.15.x

    - name: Install Dependencies
      working-directory: ./
      run: |
        echo '::group:: install ko'
        curl -L https://github.com/google/ko/releases/download/v0.7.0/ko_0.7.0_Linux_x86_64.tar.gz | tar xzf - ko
        chmod +x ./ko
        sudo mv ko /usr/local/bin
        echo '::endgroup::'

        echo '::group:: install kn'
        curl -Lo ./kn https://github.com/knative/client/releases/download/v0.19.0/kn-linux-amd64
        chmod +x ./kn
        sudo mv kn /usr/local/bin
        echo '::endgroup::'

    - name: Check out code onto GOPATH
      uses: actions/checkout@v2
      with:
        repository: ${{ matrix.org }}/${{ matrix.repo }}
        ref: ${{ matrix.branch }}
        path: ./src/${{ matrix.upstream }}

    - name: Check out mink
      uses: actions/checkout@v2
      with:
        path: ./src/github.com/mattmoor/mink

    - name: Setup Cluster
      working-directory: ./src/github.com/mattmoor/mink
      run: |
        ./hack/setup-kind.sh \
          --registry-url $(echo ${KO_DOCKER_REPO} | cut -d'/' -f 1) \
          --cluster-suffix c${{ github.run_id }}.local \
          --nodes 3 \
          --k8s-version ${{ matrix.k8s-version }}

    - name: Install mink core
      run: |
        ./hack/build.sh --install

        # Use mink to install things.
        mink install --replicas=3

    - name: Deploy Test Config
      if: ${{ matrix.skip-test-config != 'true' }}
      working-directory: ./src/${{ matrix.upstream }}
      run: |
        # Make sure the things going to system namespace make it!
        [[ ! -d ./test/config ]] || ko resolve -Pf test/config | \
           sed -E "s/(knative-eventing|knative-serving|tekton-pipelines)/${SYSTEM_NAMESPACE}/g" | \
           kubectl apply -f -

        # Be KinD to these tests.
        kubectl scale -n${SYSTEM_NAMESPACE} deployment/chaosduck --replicas=0 || true

    - name: Upload Test Images
      working-directory: ./src/${{ matrix.upstream }}
      run: |
        kubectl create namespace serving-tests || true
        [[ ! -f ./test/upload-test-images.sh ]] || ./test/upload-test-images.sh

    - name: Run e2e Tests
      working-directory: ./src/${{ matrix.upstream }}
      env:
        # Tekton expects a certain image anatomy in their CreateImage tests.
        GGCR_EXPERIMENT_ESTARGZ: "0"
      run: |
        set -x

        # Run the tests tagged as e2e on the KinD cluster.
        go test -race -count=1 -timeout=50m -tags=e2e \
           ${{ matrix.extra-go-flags }} ${{ matrix.test-suite }} \
           ${{ matrix.extra-test-flags }}

    - name: Collect ksvc diagnostics
      if: ${{ failure() }}
      run: kubectl get ksvc -oyaml

    - name: Collect pod diagnostics
      if: ${{ failure() }}
      run: kubectl describe pods

    - name: Collect system diagnostics
      if: ${{ failure() }}
      run: |
        kubectl -n${SYSTEM_NAMESPACE} get pods

        echo '::group:: describe'
        kubectl -n${SYSTEM_NAMESPACE} describe pods
        echo '::endgroup::'

        for x in $(kubectl get pods -n${SYSTEM_NAMESPACE} -oname); do
          echo "::group:: describe $x"
          kubectl -n${SYSTEM_NAMESPACE} describe $x
          echo '::endgroup::'

          echo "::group:: $x logs"
          kubectl -n${SYSTEM_NAMESPACE} logs $x --all-containers
          echo '::endgroup::'
        done

    - name: Dump Artifacts
      if: ${{ failure() }}
      run: |
        if [[ -d ${{ env.ARTIFACTS }} ]]; then
          cd ${{ env.ARTIFACTS }}
          for x in $(find . -type f); do
            echo "::group:: artifact $x"
            cat $x
            echo '::endgroup::'
          done
        fi

    - name: Post failure notice to Slack
      uses: rtCamp/action-slack-notify@v2.1.0
      if: ${{ failure() && github.event_name != 'pull_request' }}
      env:
        SLACK_ICON: http://github.com/${{ matrix.org }}.png?size=48
        SLACK_USERNAME: sockpuppet
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}

        SLACK_CHANNEL: 'mink'
        SLACK_COLOR: '#8E1600'
        MSG_MINIMAL: 'true'
        SLACK_TITLE: Periodic upstream ${{ matrix.leg }} on ${{ matrix.k8s-version }} failed.
        SLACK_MESSAGE: |
          For detailed logs: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
