name: MinKinD CLI E2Es

on:
  pull_request:
    branches: [ master ]

  schedule:
  - cron: '0 */3 * * *'

defaults:
  run:
    shell: bash
    working-directory: ./src/github.com/mattmoor/mink

jobs:
  cli-tests:
    name: e2e tests
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false # Keep running if one leg fails.
      matrix:
        k8s-version:
        - v1.17.x
        - v1.18.x
        - v1.19.x

        suite:
        - Knative helloworld
        - GCP buildpacks
        - Paketo buildpacks
        - Boson buildpacks

        # In these suites, make sure that the multi-arch logic keeps working, but elide it
        # in the others to speed things up.
        include:
        - suite: Knative helloworld
          ko-flags: --platform=all
        - suite: GCP buildpacks
          ko-flags: --platform=all

    env:
      GOPATH: ${{ github.workspace }}
      GO111MODULE: on
      GOFLAGS: -ldflags=-s -ldflags=-w -mod=vendor
      KO_DOCKER_REPO: registry.local:5000/knative
      GATEWAY_OVERRIDE: envoy-external
      GATEWAY_NAMESPACE_OVERRIDE: mink-system
      SYSTEM_NAMESPACE: mink-system
      ARTIFACTS: ${{ github.workspace }}/artifacts

    steps:
    - name: Set up Go 1.15.x
      uses: actions/setup-go@v2
      with:
        go-version: 1.15.x

    - name: Install Dependencies
      working-directory: ./
      run: |
        echo '::group:: install ko'
        curl -L https://github.com/google/ko/releases/download/v0.6.0/ko_0.6.0_Linux_x86_64.tar.gz | tar xzf - ko
        chmod +x ./ko
        sudo mv ko /usr/local/bin
        echo '::endgroup::'

        echo '::group:: install crane'
        curl -L https://github.com/google/go-containerregistry/releases/download/v0.1.4/go-containerregistry_Linux_x86_64.tar.gz | tar xzf - crane
        chmod +x ./crane
        sudo mv crane /usr/local/bin
        echo '::endgroup::'

        echo '::group:: install yq'
        go get github.com/mikefarah/yq/v3
        echo '::endgroup::'

        echo '::group:: install goimports'
        go get golang.org/x/tools/cmd/goimports
        echo '::endgroup::'

        echo '::group:: install kn'
        curl -Lo ./kn https://github.com/knative/client/releases/download/v0.19.0/kn-linux-amd64
        chmod +x ./kn
        sudo mv kn /usr/local/bin
        echo '::endgroup::'

    - name: Check out mink
      uses: actions/checkout@v2
      with:
        path: ./src/github.com/mattmoor/mink

    - name: Setup Cluster
      working-directory: ./src/github.com/mattmoor/mink
      run: |
        ./hack/setup-kind.sh \
          --registry-url $(echo ${KO_DOCKER_REPO} | cut -d'/' -f 1) \
          --cluster-suffix c${{ github.run_id }}.local \
          --nodes 3 \
          --k8s-version ${{ matrix.k8s-version }}

    - name: Install mink core
      run: |
        # Depending on the test suite, enable different ko features.
        export KOFLAGS=${{ matrix.ko-flags }}

        ./hack/build.sh --install

        # Use mink to install things.
        mink install --replicas=3

        cat > $HOME/.mink.yaml <<EOF
        # Bundle source context to here by default!
        bundle: ${KO_DOCKER_REPO}/bundle:latest

        # Send the resulting image here by default!
        image: |
          {{ if eq .Scheme "ko" }}
            ${KO_DOCKER_REPO}/{{ lower (join "ko-images" .Host .Path) }}
          {{ else if eq .Scheme "buildpack" }}
            ${KO_DOCKER_REPO}/{{ lower (join "buildpack-images" .Host .Path) }}
          {{ else if eq .Scheme "dockerfile" }}
            ${KO_DOCKER_REPO}/{{ lower (join "dockerfile-images" .Host .Path) }}
          {{ else }}
            BREAK THINGS
          {{ end }}
        EOF

    - name: Check out Knative Docs
      if: matrix.suite == 'Knative helloworld'
      uses: actions/checkout@v2
      with:
        repository: knative/docs
        path: ./src/github.com/knative/docs

    - name: Knative Hello World tests
      if: matrix.suite == 'Knative helloworld'
      working-directory: ./src/github.com/knative/docs
      run: |
        ERROR=0
        for dir in $(find ./docs/serving/samples/hello-world/ -mindepth 1 -maxdepth 1 -type d); do
          TEST="$(basename $dir)"

          if [[ ! -f $dir/Dockerfile ]]; then
            echo "Skipping ${TEST} no Dockefile found."
            continue
          fi

          if [[ "${TEST}" =~ "kotlin" ]]; then
            # TODO(mattmoor): We see a ton of kaniko snapshotting flakes with this sample.
            echo Skipping Kotlin sample: ${TEST}
            continue
          fi

          echo "::group:: Test ${TEST}"
          # Build and deploy this sample.
          kn service create ${TEST} --image=$(mink build --directory=$dir)

          # Extract the IP from the xip.io hostname, and put it in /etc/hosts to avoid flakes.
          URL="$(kn service describe ${TEST} -o url)"
          HOST="$(echo ${URL} | cut -d'/' -f 3)"
          IP="$(echo ${HOST} | cut -d'.' -f 3-6)"
          sudo echo ${IP} ${HOST} | sudo tee -a /etc/hosts

          # Make sure we can curl the sample.
          RESULT=$(curl "${URL}")

          if [[ ! "${RESULT}" =~ "Hello World" ]]; then
            echo "::error::${TEST} returned \"${RESULT}\", wanted \"Hello World\""
            ERROR=1
          fi
          echo '::endgroup::'
        done

        exit ${ERROR}

    - name: Check out Paketo Buildpack Samples
      if: matrix.suite == 'Paketo buildpacks'
      uses: actions/checkout@v2
      with:
        repository: paketo-buildpacks/samples
        path: ./src/github.com/paketo-buildpacks/samples

    - name: Paketo Buildpack Samples
      if: matrix.suite == 'Paketo buildpacks'
      working-directory: ./src/github.com/paketo-buildpacks/samples
      run: |

        # Configure everything in this repository to use the Paketo builder
        cat > .mink.yaml <<EOF
        builder: docker.io/paketobuildpacks/builder:full
        EOF

        for dir in $(find . -mindepth 2 -type f -name 'README.md' | xargs -L 1 dirname); do
          TEST="$(echo $dir | sed 's@^./@@g' | sed 's@/@-@g')";

          if [[ "${TEST}" =~ "procfile" ]]; then
            # TODO(https://github.com/paketo-buildpacks/samples/issues/20): Support procfile
            echo Skipping Procfile sample: ${TEST}
            continue
          fi

          if [[ "${TEST}" =~ "ruby-rake" ]]; then
            # The ruby/rake sample doesn't listen on a port (seems intentional and unlikely to change).
            echo Skipping Ruby sample: ${TEST}
            continue
          fi

          if [[ "${TEST}" =~ "ca-certificates" ]]; then
            # The ca-certificates sample doesn't listen on a port
            echo Skipping ca-certificates sample: ${TEST}
            continue
          fi

          echo "::group:: Test ${TEST}"

          # Build and deploy this sample.
          # TODO(mattmoor): We randomize the repo name here because of an issue overwriting an unrelated image tag with java buildpacks.
          # TODO(mattmoor): We specify MaxMetaspaceSize because the leiningen sample doesn't deduce it successfully and crashes.
          kn service create ${TEST} \
            --env=JAVA_TOOL_OPTIONS=-XX:MaxMetaspaceSize=150M \
            --image=$(mink buildpack \
              --directory=$dir \
              --image=${KO_DOCKER_REPO}/${TEST}:${RANDOM})

          # Extract the IP from the xip.io hostname, and put it in /etc/hosts to avoid flakes.
          URL="$(kn service describe ${TEST} -o url)"
          HOST="$(echo ${URL} | cut -d'/' -f 3)"
          IP="$(echo ${HOST} | cut -d'.' -f 3-6)"
          sudo echo ${IP} ${HOST} | sudo tee -a /etc/hosts

          # Make sure we can curl the sample.
          curl "${URL}"

          echo '::endgroup::'
        done

    - name: Check out Boson Buildpack Templates
      if: matrix.suite == 'Boson buildpacks'
      uses: actions/checkout@v2
      with:
        repository: boson-project/faas
        path: ./src/github.com/boson-project/faas

    - name: Boson Buildpack Templates
      if: matrix.suite == 'Boson buildpacks'
      working-directory: ./src/github.com/boson-project/faas
      run: |
        for cfg in $(find templates -name '.builders.yaml'); do
          TEST="$(dirname $cfg | sed 's@^./@@g' | sed 's@/@-@g')"
          BUILDER="$(yq r $cfg default)"

          if [[ "${TEST}" =~ "spring" ]]; then
            # TODO(https://github.com/boson-project/faas/pull/231): Support Spring
            echo Skipping Spring template: ${TEST}
            continue
          fi

          echo "::group:: ${TEST}"

          # Build and deploy this template.
          kn service create ${TEST} \
            --image=$(mink buildpack \
               --directory=$(dirname $cfg) \
               --builder=${BUILDER})

          # Extract the IP from the xip.io hostname, and put it in /etc/hosts to avoid flakes.
          URL="$(kn service describe ${TEST} -o url)"
          HOST="$(echo ${URL} | cut -d'/' -f 3)"
          IP="$(echo ${HOST} | cut -d'.' -f 3-6)"
          sudo echo ${IP} ${HOST} | sudo tee -a /etc/hosts

          # Make sure we can curl the sample.
          curl "${URL}"

          echo '::endgroup::'
        done

    - name: Check out GCP Buildpack Samples
      if: matrix.suite == 'GCP buildpacks'
      uses: actions/checkout@v2
      with:
        repository: GoogleCloudPlatform/buildpack-samples
        path: ./src/github.com/GoogleCloudPlatform/buildpack-samples

    - name: GCP Buildpack Samples
      if: matrix.suite == 'GCP buildpacks'
      working-directory: ./src/github.com/GoogleCloudPlatform/buildpack-samples
      run: |
        # Configure everything in this repository to use the GCP builder
        cat > .mink.yaml <<EOF
        builder: gcr.io/buildpacks/builder
        EOF

        ERROR=0
        for dir in $(find . -mindepth 1 -maxdepth 1 -type d -name 'sample-*'); do
          TEST="$(basename $dir)"
          echo "::group:: Test ${TEST}"

          # Build and deploy this sample.
          kn service create ${TEST} --image=$(mink buildpack --directory=$dir)

          # Extract the IP from the xip.io hostname, and put it in /etc/hosts to avoid flakes.
          URL="$(kn service describe ${TEST} -o url)"
          HOST="$(echo ${URL} | cut -d'/' -f 3)"
          IP="$(echo ${HOST} | cut -d'.' -f 3-6)"
          sudo echo ${IP} ${HOST} | sudo tee -a /etc/hosts

          # Make sure we can curl the sample.
          RESULT=$(curl "${URL}")

          if [[ ! "${RESULT}" =~ "hello, world" ]]; then
            echo "::error::${TEST} returned \"${RESULT}\", wanted \"hello, world\""
            ERROR=1
          fi

          echo '::endgroup::'
        done

        exit ${ERROR}

    - name: Collect ksvc diagnostics
      if: ${{ failure() }}
      run: kubectl get services.serving.knative.dev -oyaml

    - name: Collect pod diagnostics
      if: ${{ failure() }}
      run: kubectl describe pods

    - name: Collect system diagnostics
      if: ${{ failure() }}
      run: |
        kubectl -n${SYSTEM_NAMESPACE} get pods

        echo '::group:: describe'
        kubectl -n${SYSTEM_NAMESPACE} describe pods
        echo '::endgroup::'

        for x in $(kubectl get pods -n${SYSTEM_NAMESPACE} -oname); do
          echo "::group:: describe $x"
          kubectl -n${SYSTEM_NAMESPACE} describe $x
          echo '::endgroup::'

          echo "::group:: $x logs"
          kubectl -n${SYSTEM_NAMESPACE} logs $x --all-containers
          echo '::endgroup::'
        done

    - name: Post failure notice to Slack
      uses: rtCamp/action-slack-notify@v2.1.0
      if: ${{ failure() && github.event_name != 'pull_request' }}
      env:
        SLACK_ICON: http://github.com/mattmoor-sockpuppet.png?size=48
        SLACK_USERNAME: sockpuppet
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}

        SLACK_CHANNEL: 'mink'
        SLACK_COLOR: '#8E1600'
        MSG_MINIMAL: 'true'
        SLACK_TITLE: Periodic ${{ matrix.suite }} CLI test failed on ${{ matrix.k8s-version }}.
        SLACK_MESSAGE: |
          For detailed logs: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
