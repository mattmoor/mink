name: MinKinD CLI E2Es

on:
  pull_request:
    branches: [ master ]

  schedule:
  - cron: '0 */3 * * *'

defaults:
  run:
    shell: bash
    working-directory: ./src/github.com/mattmoor/mink

jobs:
  cli-tests:
    name: e2e tests
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false # Keep running if one leg fails.
      matrix:
        k8s-version:
        - v1.17.11
        - v1.18.8
        - v1.19.1

        suite:
        - Knative helloworld
        - GCP buildpacks
        - Paketo buildpacks
        - Boson buildpacks

        # Map between K8s and KinD versions.
        # This is attempting to make it a bit clearer what's being tested.
        # See: https://github.com/kubernetes-sigs/kind/releases/tag/v0.9.0
        include:
        - k8s-version: v1.17.11
          kind-version: v0.9.0
          kind-image-sha: sha256:5240a7a2c34bf241afb54ac05669f8a46661912eab05705d660971eeb12f6555
        - k8s-version: v1.18.8
          kind-version: v0.9.0
          kind-image-sha: sha256:f4bcc97a0ad6e7abaf3f643d890add7efe6ee4ab90baeb374b4f41a4c95567eb
        - k8s-version: v1.19.1
          kind-version: v0.9.0
          kind-image-sha: sha256:98cf5288864662e37115e362b23e4369c8c4a408f99cbc06e58ac30ddc721600

        # In these suites, make sure that the multi-arch logic keeps working, but elide it
        # in the others to speed things up.
        - suite: Knative helloworld
          ko-flags: --platform=all
        - suite: GCP buildpacks
          ko-flags: --platform=all

    env:
      GOPATH: ${{ github.workspace }}
      GO111MODULE: on
      GOFLAGS: -ldflags=-s -ldflags=-w -mod=vendor
      REGISTRY_PORT: 5000
      REGISTRY_NAME: registry.local
      KO_DOCKER_REPO: registry.local:5000/knative
      GATEWAY_OVERRIDE: envoy-external
      GATEWAY_NAMESPACE_OVERRIDE: mink-system
      SYSTEM_NAMESPACE: mink-system
      ARTIFACTS: ${{ github.workspace }}/artifacts

    steps:
    - name: Set up Go 1.15.x
      uses: actions/setup-go@v2
      with:
        go-version: 1.15.x

    - name: Install Dependencies
      working-directory: ./
      run: |
        echo '::group:: install ko'
        curl -L https://github.com/google/ko/releases/download/v0.6.0/ko_0.6.0_Linux_x86_64.tar.gz | tar xzf - ko
        chmod +x ./ko
        sudo mv ko /usr/local/bin
        echo '::endgroup::'

        echo '::group:: install crane'
        curl -L https://github.com/google/go-containerregistry/releases/download/v0.1.4/go-containerregistry_Linux_x86_64.tar.gz | tar xzf - crane
        chmod +x ./crane
        sudo mv crane /usr/local/bin
        echo '::endgroup::'

        echo '::group:: install yq'
        go get github.com/mikefarah/yq/v3
        echo '::endgroup::'

        echo '::group:: install goimports'
        go get golang.org/x/tools/cmd/goimports
        echo '::endgroup::'

        echo '::group:: install kn'
        curl -Lo ./kn https://github.com/knative/client/releases/download/v0.18.0/kn-linux-amd64
        chmod +x ./kn
        sudo mv kn /usr/local/bin
        echo '::endgroup::'

    - name: Check out mink
      uses: actions/checkout@v2
      with:
        path: ./src/github.com/mattmoor/mink

    - name: Install KinD
      run: |
        set -x

        # Disable swap otherwise memory enforcement doesn't work
        # See: https://kubernetes.slack.com/archives/CEKK1KTN2/p1600009955324200
        sudo swapoff -a
        sudo rm -f /swapfile

        curl -Lo ./kind https://github.com/kubernetes-sigs/kind/releases/download/${{ matrix.kind-version }}/kind-$(uname)-amd64
        chmod +x ./kind
        sudo mv kind /usr/local/bin

    - name: Create KinD Cluster
      run: |
        set -x

        # KinD configuration.
        cat > kind.yaml <<EOF
        apiVersion: kind.x-k8s.io/v1alpha4
        kind: Cluster
        nodes:
        - role: control-plane
          image: kindest/node:${{ matrix.k8s-version }}@${{ matrix.kind-image-sha }}
        - role: worker
          image: kindest/node:${{ matrix.k8s-version }}@${{ matrix.kind-image-sha }}
        - role: worker
          image: kindest/node:${{ matrix.k8s-version }}@${{ matrix.kind-image-sha }}
        - role: worker
          image: kindest/node:${{ matrix.k8s-version }}@${{ matrix.kind-image-sha }}

        kubeadmConfigPatches:
          # This is needed in order to support projected volumes with service account tokens.
          # See: https://kubernetes.slack.com/archives/CEKK1KTN2/p1600268272383600
          - |
            apiVersion: kubeadm.k8s.io/v1beta2
            kind: ClusterConfiguration
            metadata:
              name: config
            apiServer:
              extraArgs:
                "service-account-issuer": "kubernetes.default.svc"
                "service-account-signing-key-file": "/etc/kubernetes/pki/sa.key"
            networking:
              dnsDomain: "c${{ github.run_id }}.local"
          # This is needed to avoid filling our disk.
          # See: https://kubernetes.slack.com/archives/CEKK1KTN2/p1603391142276400
          - |
            kind: KubeletConfiguration
            metadata:
              name: config
            imageGCHighThresholdPercent: 90

        # Support a local registry
        # Support many layered images: https://kubernetes.slack.com/archives/CEKK1KTN2/p1602770111199000
        containerdConfigPatches:
        - |-
          [plugins."io.containerd.grpc.v1.cri".registry.mirrors."$REGISTRY_NAME:$REGISTRY_PORT"]
            endpoint = ["http://$REGISTRY_NAME:$REGISTRY_PORT"]
          [plugins."io.containerd.grpc.v1.cri".containerd]
            disable_snapshot_annotations = true
        EOF

        # Create a cluster!
        kind create cluster --config kind.yaml

    - name: Setup local registry
      run: |
        # Run a registry.
        docker run -d --restart=always \
          -p $REGISTRY_PORT:$REGISTRY_PORT --name $REGISTRY_NAME registry:2
        # Connect the registry to the KinD network.
        docker network connect "kind" $REGISTRY_NAME
        # Make the $REGISTRY_NAME -> 127.0.0.1, to tell `ko` to publish to
        # local reigstry, even when pushing $REGISTRY_NAME:$REGISTRY_PORT/some/image
        sudo echo "127.0.0.1 $REGISTRY_NAME" | sudo tee -a /etc/hosts

    - name: Install mink core
      run: |
        set -o pipefail

        # Depending on the test suite, enable different ko features.
        export KOFLAGS=${{ matrix.ko-flags }}
        # Tell the build script to process the yaml as follows.
        export PROCESSOR="sed s/LoadBalancer/NodePort/g"

        ./hack/build.sh --install

        # Use mink to install things.
        mink install

    - name: Check out Knative Docs
      if: matrix.suite == 'Knative helloworld'
      uses: actions/checkout@v2
      with:
        repository: knative/docs
        path: ./src/github.com/knative/docs

    - name: Knative Hello World tests
      if: matrix.suite == 'Knative helloworld'
      working-directory: ./src/github.com/knative/docs
      run: |
        HTTP=$(kubectl get svc -n${SYSTEM_NAMESPACE} envoy-external -ojsonpath='{.spec.ports[?(@.targetPort==8080)].nodePort}')
        IPS=( $(kubectl get nodes -lkubernetes.io/hostname!=kind-control-plane -ojsonpath='{.items[*].status.addresses[?(@.type=="InternalIP")].address}') )

        ERROR=0
        for dir in $(find ./docs/serving/samples/hello-world/ -mindepth 1 -maxdepth 1 -type d); do
          TEST="$(basename $dir)"
          echo "::group:: Test ${TEST}"

          if [[ -f $dir/Dockerfile ]]; then
            # Build and deploy this sample.
            kn service create ${TEST} --image=$(mink build --directory=$dir --image=${KO_DOCKER_REPO}/bundle:latest)

            # Make sure we can curl the sample.
            RESULT=$(curl -H "Host: ${TEST}.default.example.com" "http://${IPS[0]}:${HTTP}")

            if [[ ! "${RESULT}" =~ "Hello World" ]]; then
              echo "::error::${TEST} returned \"${RESULT}\", wanted \"Hello World\""
              ERROR=1
            fi
          else
            echo "Skipping ${TEST} no Dockefile found."
          fi

          echo '::endgroup::'
        done
        exit ${ERROR}

    - name: Check out Paketo Buildpack Samples
      if: matrix.suite == 'Paketo buildpacks'
      uses: actions/checkout@v2
      with:
        repository: paketo-buildpacks/samples
        path: ./src/github.com/paketo-buildpacks/samples

    - name: Paketo Buildpack Samples
      if: matrix.suite == 'Paketo buildpacks'
      working-directory: ./src/github.com/paketo-buildpacks/samples
      run: |
        HTTP=$(kubectl get svc -n${SYSTEM_NAMESPACE} envoy-external -ojsonpath='{.spec.ports[?(@.targetPort==8080)].nodePort}')
        IPS=( $(kubectl get nodes -lkubernetes.io/hostname!=kind-control-plane -ojsonpath='{.items[*].status.addresses[?(@.type=="InternalIP")].address}') )

        for dir in $(find . -mindepth 2 -type f -name 'README.md' | xargs -L 1 dirname); do
          TEST="$(echo $dir | sed 's@^./@@g' | sed 's@/@-@g')";

          if [[ "${TEST}" =~ "procfile" ]]; then
            # TODO(https://github.com/paketo-buildpacks/samples/issues/20): Support procfile
            echo Skipping Procfile sample: ${TEST}
            continue
          fi

          if [[ "${TEST}" =~ "ruby-rake" ]]; then
             # The ruby/rake sample doesn't listen on a port (seems intentional and unlikely to change.
            echo Skipping Ruby sample: ${TEST}
            continue
          fi

          PORT=8080
          # TODO(https://github.com/paketo-buildpacks/puma/issues/7): Remove this snowflake for Puma once configurable.
          if [[ "${TEST}" =~ "ruby-puma" ]]; then
             # Puma listens on 9292
             PORT=9292
          fi

          echo "::group:: Test ${TEST}"

          # Build and deploy this sample.
          # TODO(mattmoor): We randomize the repo name here because of an issue overwriting an unrelated image tag with java buildpacks.
          # TODO(mattmoor): We specify MaxMetaspaceSize because the leiningen sample doesn't deduce it successfully and crashes.
          kn service create ${TEST} \
            --env=JAVA_TOOL_OPTIONS=-XX:MaxMetaspaceSize=150M --port ${PORT} \
            --image=$(mink buildpack --directory=$dir --builder=docker.io/paketobuildpacks/builder:full --image=${KO_DOCKER_REPO}/bundle:${RANDOM})

          # Make sure we can curl the sample.
          curl -H "Host: ${TEST}.default.example.com" "http://${IPS[0]}:${HTTP}"

          echo '::endgroup::'
        done

    - name: Check out Boson Buildpack Templates
      if: matrix.suite == 'Boson buildpacks'
      uses: actions/checkout@v2
      with:
        repository: boson-project/faas
        path: ./src/github.com/boson-project/faas

    - name: Boson Buildpack Templates
      if: matrix.suite == 'Boson buildpacks'
      working-directory: ./src/github.com/boson-project/faas
      run: |
        HTTP=$(kubectl get svc -n${SYSTEM_NAMESPACE} envoy-external -ojsonpath='{.spec.ports[?(@.targetPort==8080)].nodePort}')
        IPS=( $(kubectl get nodes -lkubernetes.io/hostname!=kind-control-plane -ojsonpath='{.items[*].status.addresses[?(@.type=="InternalIP")].address}') )

        for cfg in $(find templates -name '.builders.yaml'); do
          TEST="$(dirname $cfg | sed 's@^./@@g' | sed 's@/@-@g')"
          BUILDER="$(yq r $cfg default)"

          if [[ "${TEST}" =~ "go" ]]; then
            # TODO(https://github.com/boson-project/buildpacks/issues/40): Support Go
            echo Skipping Go template: ${TEST}
            continue
          fi

          echo "::group:: ${TEST}"

          # Build and deploy this template.
          kn service create ${TEST} \
            --image=$(mink buildpack --directory=$(dirname $cfg) --builder=${BUILDER} --image=${KO_DOCKER_REPO}/bundle)

          # Make sure we can curl the template.
          curl -H "Host: ${TEST}.default.example.com" "http://${IPS[0]}:${HTTP}"

          echo '::endgroup::'
        done

    - name: Check out GCP Buildpack Samples
      if: matrix.suite == 'GCP buildpacks'
      uses: actions/checkout@v2
      with:
        repository: GoogleCloudPlatform/buildpack-samples
        path: ./src/github.com/GoogleCloudPlatform/buildpack-samples

    - name: GCP Buildpack Samples
      if: matrix.suite == 'GCP buildpacks'
      working-directory: ./src/github.com/GoogleCloudPlatform/buildpack-samples
      run: |
        HTTP=$(kubectl get svc -n${SYSTEM_NAMESPACE} envoy-external -ojsonpath='{.spec.ports[?(@.targetPort==8080)].nodePort}')
        IPS=( $(kubectl get nodes -lkubernetes.io/hostname!=kind-control-plane -ojsonpath='{.items[*].status.addresses[?(@.type=="InternalIP")].address}') )

        ERROR=0
        for dir in $(find . -mindepth 1 -maxdepth 1 -type d -name 'sample-*'); do
          TEST="$(basename $dir)"
          echo "::group:: Test ${TEST}"

          # Build and deploy this sample.
          kn service create ${TEST} --image=$(mink buildpack --directory=$dir --builder=gcr.io/buildpacks/builder --image=${KO_DOCKER_REPO}/bundle:latest)

          # Make sure we can curl the sample.
          RESULT=$(curl -H "Host: ${TEST}.default.example.com" "http://${IPS[0]}:${HTTP}")

          if [[ ! "${RESULT}" =~ "hello, world" ]]; then
            echo "::error::${TEST} returned \"${RESULT}\", wanted \"hello, world\""
            ERROR=1
          fi

          echo '::endgroup::'
        done

        exit ${ERROR}

    - name: Collect ksvc diagnostics
      if: ${{ failure() }}
      run: kubectl get services.serving.knative.dev -oyaml

    - name: Collect pod diagnostics
      if: ${{ failure() }}
      run: kubectl describe pods

    - name: Collect system diagnostics
      if: ${{ failure() }}
      run: |
        kubectl -n${SYSTEM_NAMESPACE} get pods

        echo '::group:: describe'
        kubectl -n${SYSTEM_NAMESPACE} describe pods
        echo '::endgroup::'

        for x in $(kubectl get pods -n${SYSTEM_NAMESPACE} -oname); do
          echo "::group:: describe $x"
          kubectl -n${SYSTEM_NAMESPACE} describe $x
          echo '::endgroup::'

          echo "::group:: $x logs"
          kubectl -n${SYSTEM_NAMESPACE} logs $x --all-containers
          echo '::endgroup::'
        done

    - name: Post failure notice to Slack
      uses: rtCamp/action-slack-notify@v2.1.0
      if: ${{ failure() && github.event_name != 'pull_request' }}
      env:
        SLACK_ICON: http://github.com/mattmoor-sockpuppet.png?size=48
        SLACK_USERNAME: sockpuppet
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}

        SLACK_CHANNEL: 'mink'
        SLACK_COLOR: '#8E1600'
        MSG_MINIMAL: 'true'
        SLACK_TITLE: Periodic ${{ matrix.suite }} CLI test failed on ${{ matrix.k8s-version }} failed.
        SLACK_MESSAGE: |
          For detailed logs: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
